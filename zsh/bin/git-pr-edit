#!/usr/bin/env python

import json
import os
import hashlib
import pathlib
import re
import subprocess
import sys
import time
import _utils

editor = os.getenv("EDITOR")
assert editor
prog = pathlib.Path(sys.argv[0]).stem
current_branch = _utils.get_current_branch()

# Check that this branch exists remotely
remote_branches = subprocess.check_output(["git", "branch", "-r"], text=True)
if not re.search(current_branch, remote_branches):
    _utils.error("Branch doesn't exist on remote origin!")
    sys.exit(1)

base_branch = _utils.get_base_branch()

existing_old_pr_files = list(pathlib.Path(".").glob("git-pr-create*old*"))
existing_old_pr_files.sort(key=lambda x: x.stem)
existing_new_pr_files = list(pathlib.Path(".").glob("git-pr-create*new*"))
existing_new_pr_files.sort(key=lambda x: x.stem)

existing_old = existing_old_pr_files[0] if existing_old_pr_files else None
existing_new = existing_new_pr_files[0] if existing_new_pr_files else None

# If a PR file already exists (if a previous attempt to create a PR has failed) use that file instead
if existing_old and existing_new:
    old_pr_file = existing_old
    new_pr_file = existing_new
    _utils.info(f"Using existing PR file: {existing_new}")
    time.sleep(0.5)

    old_hash = hashlib.md5(existing_old.read_bytes())

    subprocess.run([editor, new_pr_file])
else:
    # Get list of labels that are available in the current repository
    repo_labels = subprocess.check_output(
        ["gh", "label", "list", "--json", "name", "--jq", ".[].name", "--limit", "100"],
        text=True,
    ).splitlines()

    # Use the last commit message as the PR title
    pr_title = subprocess.check_output(["git", "log", "-1", "--pretty=%B"], text=True)
    cur_time = int(time.time())
    old_pr_file = pathlib.Path(f"./git-pr-create.{cur_time}.old.md")
    new_pr_file = pathlib.Path(f"./git-pr-create.{cur_time}.new.md")

    content = json.loads(
        subprocess.check_output(
            [
                "gh",
                "pr",
                "view",
                "--json",
                "title",
                "--json",
                "body",
                "--json",
                "labels",
                "--json",
                "isDraft",
                "--json",
                "state",
                "--json",
                "number",
                "--json",
                "baseRefName",
            ]
        )
    )
    pr_number = content["number"]
    title = content["title"]
    body = content["body"]
    is_draft = content["isDraft"]
    state = content["state"].lower()
    base_branch = content["baseRefName"]
    labels = [label["name"] for label in content["labels"]]

    pr_file_content = f"""--- TITLE
{title.strip()}
--- END

--- EXISTING LABELS
{"\n".join(repo_labels)}
--- END

--- LABELS
{"\n".join(labels)}
--- END

IS DRAFT can be `yes` or `no`
--- IS DRAFT
{"yes" if is_draft else "no"}
--- END

STATE can be `open`, `merged` or `closed`
--- STATE
{state}
--- END

--- BASE BRANCH
{base_branch.strip()}
--- END

--- BODY
{body.strip()}
--- END
"""

    old_pr_file.write_text(pr_file_content)
    new_pr_file.write_text(pr_file_content)

    old_hash = hashlib.md5(pr_file_content.encode())

    subprocess.run([editor, new_pr_file])

new_hash = hashlib.md5(new_pr_file.read_bytes())

if old_hash.hexdigest() == new_hash.hexdigest():
    print("\nNo PR created!", file=sys.stderr)
    old_pr_file.unlink(missing_ok=True)
    new_pr_file.unlink(missing_ok=True)
    sys.exit(1)

content = new_pr_file.read_text()

match = re.search("--- TITLE\n(.*?)\n--- END", content, re.MULTILINE)
assert match
new_title = match.group(1)
match = re.search("--- LABELS\n(.*?)\n--- END", content, re.MULTILINE | re.DOTALL)
assert match
new_labels = match.group(1).splitlines()
match = re.search("--- IS DRAFT\n(.*?)\n--- END", content, re.MULTILINE)
assert match
new_is_draft = match.group(1)
match = re.search("--- STATE\n(.*?)\n--- END", content, re.MULTILINE)
assert match
new_state = match.group(1)
match = re.search("--- BASE BRANCH\n(.*?)\n--- END", content, re.MULTILINE)
assert match
new_base_branch = match.group(1)
match = re.search("--- BODY\n(.*?)\n--- END", content, re.MULTILINE | re.DOTALL)
assert match
new_body = match.group(1)

args = [
    "gh",
    "pr",
    "edit",
    "--title",
    new_title,
    "--body",
    new_body,
    "--base",
    new_base_branch,
]

for label in labels:
    # Delete labels that are not in the original labels for the PR
    if label not in new_labels:
        args.append("--remove-label")
    else:
        args.append("--add-label")
    args.append(label)

proc = subprocess.run(args, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
if proc.returncode != 0:
    _utils.error(proc.stdout)
    _utils.warn(f"PR file written to {new_pr_file}, re-run '{prog}' to use")
    sys.exit(1)

new_is_draft = True if new_is_draft == "yes" else False

if new_is_draft is not is_draft:
    if new_is_draft is False:
        subprocess.run(["gh", "pr", "ready"], check=True)
    elif new_state == "draft":
        subprocess.run(["gh", "pr", "ready", "--undo"], check=True)

if new_state != state:
    if new_state == "open" and state == "closed":
        subprocess.run(["gh", "pr", "reopen", pr_number], check=True)
    elif new_state == "closed":
        subprocess.run(["gh", "pr", "close", pr_number], check=True)

old_pr_file.unlink(missing_ok=True)
new_pr_file.unlink(missing_ok=True)
