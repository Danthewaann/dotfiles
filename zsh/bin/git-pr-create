#!/usr/bin/env python

from typing import Any
import os
import hashlib
import json
import pathlib
import platform
import re
import subprocess
import sys
import time
import _utils


# Github label to slack emojis
pr_types = {
    "python": "python",
    "ruby": "ruby_prog",
    "go": "go",
    "docker": "docker",
    "terraform": "terraform",
    "documentation": "docs",
}
editor = os.getenv("EDITOR")
assert editor

prog = pathlib.Path(sys.argv[0]).stem

if platform.system() == "Darwin":
    pb_copy = "pbcopy"
else:
    pb_copy = "xclip"


def print_pr_info(is_draft: bool = False) -> None:
    slack_label = ""
    content: dict[str, Any] = json.loads(
        subprocess.check_output(
            ["gh", "pr", "view", "--json", "url", "--json", "labels", "--json", "title"]
        )
    )
    url = content["url"]
    title = content["title"]
    labels = content["labels"]

    for pr_type in pr_types:
        if pr_type in labels:
            slack_label = f" :{pr_types[pr_type]}:"
            break

    if is_draft:
        output = f"{url}\n:point_up:{slack_label} [Draft PR] {title}"
    else:
        output = f"{url}\n:point_up:{slack_label} {title}"

    print("\nThe below has been copied to your clipboard! ðŸ“‹\n")
    print(output)
    subprocess.run(f"echo '{output}' | {pb_copy}", shell=True, check=True)


current_branch = _utils.get_current_branch()

# Check that this branch exists remotely
remote_branches = subprocess.check_output(["git", "branch", "-r"], text=True)
if not re.search(current_branch, remote_branches):
    _utils.error("Branch doesn't exist on remote origin!")
    sys.exit(1)

# Check if a PR has already been opened for the current branch
pr_info = subprocess.check_output(["gh", "pr", "list"], text=True)
if re.search(current_branch, pr_info):
    print(file=sys.stderr)
    _utils.warn("A PR has already been opened for this branch")
    print_pr_info()
    sys.exit(1)

base_branch = _utils.get_base_branch()

existing_old_pr_files = list(pathlib.Path(".").glob("git-pr-create*old*"))
existing_old_pr_files.sort(key=lambda x: x.stem)
existing_new_pr_files = list(pathlib.Path(".").glob("git-pr-create*new*"))
existing_new_pr_files.sort(key=lambda x: x.stem)

existing_old = existing_old_pr_files[0] if existing_old_pr_files else None
existing_new = existing_new_pr_files[0] if existing_new_pr_files else None

# If a PR file already exists (if a previous attempt to create a PR has failed) use that file instead
if existing_old and existing_new:
    old_pr_file = existing_old
    new_pr_file = existing_new
    _utils.info(f"Using existing PR file: {existing_new}")
    time.sleep(0.5)

    old_hash = hashlib.md5(existing_old.read_bytes())

    subprocess.run([editor, new_pr_file])
else:
    # Get list of labels that are available in the current repository
    repo_labels = subprocess.check_output(
        ["gh", "label", "list", "--json", "name", "--jq", ".[].name", "--limit", "100"],
        text=True,
    ).splitlines()

    # Use the last commit message as the PR title
    pr_title = subprocess.check_output(["git", "log", "-1", "--pretty=%B"], text=True)
    cur_time = int(time.time())
    old_pr_file = pathlib.Path(f"./git-pr-create.{cur_time}.old.md")
    new_pr_file = pathlib.Path(f"./git-pr-create.{cur_time}.new.md")
    pr_template = ""
    pr_template_file = pathlib.Path(".github/PULL_REQUEST_TEMPLATE.md")
    if pr_template_file.exists():
        pr_template = pr_template_file.read_text()
    ticket_number = _utils.get_ticket_number(current_branch)
    if ticket_number:
        pr_template = re.sub("TICKET_NUMBER", ticket_number, pr_template)

    pr_file_content = f"""--- TITLE
{pr_title.strip()}
--- END

--- EXISTING LABELS
{"\n".join(repo_labels)}
--- END

--- LABELS

--- END

IS DRAFT can be `yes` or `no`
--- IS DRAFT
no
--- END

--- BASE BRANCH
{base_branch.strip()}
--- END

--- BODY
{pr_template.strip()}
--- END
"""

    old_pr_file.write_text(pr_file_content)
    new_pr_file.write_text(pr_file_content)

    old_hash = hashlib.md5(pr_file_content.encode())

    subprocess.run([editor, new_pr_file])

new_hash = hashlib.md5(new_pr_file.read_bytes())

if old_hash.hexdigest() == new_hash.hexdigest():
    print("\nNo PR created!", file=sys.stderr)
    old_pr_file.unlink(missing_ok=True)
    new_pr_file.unlink(missing_ok=True)
    sys.exit(1)

content = new_pr_file.read_text()

match = re.search("--- TITLE\n(.*?)\n--- END", content, re.MULTILINE)
assert match
new_title = match.group(1)
match = re.search("--- LABELS\n(.*?)\n--- END", content, re.MULTILINE | re.DOTALL)
assert match
new_labels = match.group(1).splitlines()
match = re.search("--- IS DRAFT\n(.*?)\n--- END", content, re.MULTILINE)
assert match
new_is_draft = match.group(1)
match = re.search("--- BASE BRANCH\n(.*?)\n--- END", content, re.MULTILINE)
assert match
new_base_branch = match.group(1)
match = re.search("--- BODY\n(.*?)\n--- END", content, re.MULTILINE | re.DOTALL)
assert match
new_body = match.group(1)

args = [
    "gh",
    "pr",
    "create",
    "--head",
    current_branch,
    "--assignee",
    "@me",
    "--title",
    new_title,
    "--body",
    new_body,
    "--base",
    new_base_branch,
]

for label in new_labels:
    args.append("--label")
    args.append(label)
if new_is_draft == "yes":
    args.append("--draft")

proc = subprocess.run(args, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
if proc.returncode != 0:
    _utils.error(proc.stdout)
    _utils.warn(f"PR file written to {new_pr_file}, re-run '{prog}' to use")
    sys.exit(1)

print_pr_info(is_draft=True if new_is_draft == "yes" else False)
old_pr_file.unlink(missing_ok=True)
new_pr_file.unlink(missing_ok=True)
