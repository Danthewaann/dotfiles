#!/usr/bin/env python3

import os
import pathlib
import subprocess
import sys
import _utils

# From: https://morgan.cugerone.com/blog/workarounds-to-git-worktree-using-bare-repository-and-cannot-fetch-remote-branches/
#
# Examples of call:
# git-clone-bare git@github.com:name/repo.git
# => Clones to a /repo directory
#
# git-clone-bare git@github.com:name/repo.git my-repo
# => Clones to a /my-repo directory

if len(sys.argv) < 2:
    _utils.error("Usage: git-clone-bare <url> [name]")
    sys.exit(1)

url = sys.argv[1]
basename = pathlib.Path(url)
name = pathlib.Path(sys.argv[2]) if len(sys.argv) > 2 else pathlib.Path(basename.stem)

name.mkdir(exist_ok=True)
os.chdir(name)

# Moves all the administrative git files (a.k.a $GIT_DIR) under .bare directory.
#
# Plan is to create worktrees as siblings of this directory.
# Example targeted structure:
# .bare
# main
# new-awesome-feature
# hotfix-bug-12
# ...
print(file=sys.stderr)
_utils.info("Cloning bare repository...")
_utils.run_command(["git", "clone", "--bare", url, ".bare"])

with open(".git", "w") as git_file:
    git_file.write("gitdir: ./.bare\n")

# Explicitly sets the remote origin fetch so we can fetch remote branches
subprocess.run(
    ["git", "config", "remote.origin.fetch", "+refs/heads/*:refs/remotes/origin/*"]
)

# Gets all branches from origin
print(file=sys.stderr)
_utils.info("Fetching remote branches...")
_utils.run_command(["git", "fetch", "origin"])

# Creating base worktree
print(file=sys.stderr)
_utils.info("Creating base worktree...")
print(file=sys.stderr)
base_branch = _utils.get_base_branch()
subprocess.run(["gitw-add", base_branch])
