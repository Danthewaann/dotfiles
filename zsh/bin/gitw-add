#!/usr/bin/env bash

set -eo pipefail

CUR_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

source "$CUR_DIR/_git-common"

args=()
branch_name=
checkout_only=0
copy_venv=0
track_base_branch=0

function usage() {
    cat <<-END >/dev/stderr

Usage:
    branch_name      name of the branch to create

    --checkout-only  only checkout the branch
    --copy           copy .venv from base worktree into new worktree
END
}

while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
        usage
        exit 2
        ;;
    --checkout-only)
        checkout_only=1
        shift
        ;;
    --copy)
        copy_venv=1
        shift
        ;;
    *)
        args+=("$1")
        shift
        ;;
    esac
done

>&2 echo

set -- "${args[@]}"

if [[ $# -lt 1 ]]; then
    error "Must provide a branch name!"
    usage
    exit 1
fi

branch_name="$1"
shift

# If the branch name starts with `origin/` remove that section
if [[ "$branch_name" == origin/* ]]; then
    branch_name=$(echo "$branch_name" | cut -d'/' -f2-)
fi

# Convert all forward slashes to dashes
converted_name=${branch_name//\//-}
# Convert dots to underscores as tmux sessions can't contain dots
converted_name=$(tr . _ <<<"$converted_name")

# If we are already inside a worktree change directory to the bare repo
if ! is_bare_repo=$(git rev-parse --is-inside-work-tree 2>&1); then true; fi
if [[ $is_bare_repo == "true" ]]; then
    cd "$(gitw-get 2>/dev/null)/.."
fi

# Make sure we are inside a bare repo before proceeding
if ! is_bare_repo=$(git rev-parse --is-bare-repository 2>&1); then true; fi
if [[ $is_bare_repo != "true" ]]; then
    error "Must be run in a worktree or bare repository!"
    exit 1
fi

# If the worktree already exists, switch to it
if [[ -d $converted_name ]]; then
    info "Switching to worktree..."
    cd "$converted_name" || exit
    sleep 0.3
    tmux-sessionizer "$(pwd)" "$@"
    exit $?
fi

info "Running git fetch..."
if ! output=$(git -c color.ui=always fetch 2>&1); then
    >&2 echo "$output"
    exit 1
else
    if [[ -n "$output" ]]; then
        >&2 echo "$output"
    fi
fi
>&2 echo

base_branch=$(git-get-base-branch)

if [[ "$branch_name" != "$base_branch" ]]; then
    # If the branch doesn't exist locally create it
    local_branch_arg=
    if ! git branch | grep "\w*$branch_name\$" >/dev/null; then
        local_branch_arg="-b"
    fi

    if [[ "$converted_name" != "$branch_name" ]]; then
        add_args=("$converted_name" "$local_branch_arg" "$branch_name")
    else
        add_args=("$local_branch_arg" "$branch_name")
    fi
else
    track_base_branch=1
    add_args=("$branch_name")
fi

# Create a new worktree using the converted name whilst checking out the branch
info "Creating worktree..."
# shellcheck disable=SC2068
if ! output=$(git worktree add ${add_args[@]} 2>&1); then
    error "$output"
    exit 1
else
    if [[ -n "$output" ]]; then
        >&2 echo "$output"
    fi
fi

# Enter the new worktree
cd "$converted_name" || exit

if [[ $track_base_branch -eq 1 ]]; then
    >&2 echo
    info "Setting tracking information for base branch..."
    if ! output=$(git branch --set-upstream-to=origin/"$branch_name" "$branch_name" 2>&1); then
        error "$output"
        exit 1
    else
        if [[ -n "$output" ]]; then
            >&2 echo "$output"
        fi
    fi
fi

# Optional post checkout steps
if [[ $checkout_only -ne 1 ]]; then
    current_dir=$(pwd)
    base_worktree=$(gitw-get 2>/dev/null)

    if [[ -f "poetry.lock" ]]; then
        >&2 echo
        info "Running poetry install..."
        >&2 echo
        if ! poetry install --all-extras >/dev/stderr 2>&1; then true; fi
    elif [[ -f "pyproject.toml" ]]; then
        >&2 echo
        info "Running uv pip install with pyproject.toml..."
        >&2 echo
        if ! uv venv >/dev/stderr 2>&1; then true; fi
        if ! uv pip install -r pyproject.toml --all-extras >/dev/stderr 2>&1; then true; fi
    fi
fi

>&2 echo
success "Successfully created worktree!"

>&2 echo
info "Switching to worktree..."
sleep 0.3
tmux-sessionizer "$(pwd)" "$@"
tmux-reset-cache &
