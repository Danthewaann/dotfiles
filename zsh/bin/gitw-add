#!/usr/bin/env bash

set -eo pipefail

CUR_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

source "$CUR_DIR/_git-common"

if [[ $# -lt 1 ]]; then
    error "Must provide a branch name!"
    exit 1
fi

branch_name="$1"
shift

# If the branch name starts with `origin/` remove that section
if [[ "$branch_name" == origin/* ]]; then
    branch_name=$(echo "$branch_name" | cut -d'/' -f2-)
fi

# Convert all forward slashes to dashes
converted_name=${branch_name//\//-}
# Convert dots to underscores as tmux sessions can't contain dots
converted_name=$(tr . _ <<<"$converted_name")

# If we are inside a python virtual environment, we need to source the
# activate script to allow us to run the deactivate script later
# when checking out a repo that contains a `poetry.lock` file.
#
# shellcheck disable=SC1091
if [[ -n "$VIRTUAL_ENV" ]]; then source .venv/bin/activate; fi

# If we are already inside a worktree change directory to the bare repo
if ! is_bare_repo=$(git rev-parse --is-inside-work-tree 2>&1); then true; fi
if [[ $is_bare_repo == "true" ]]; then
    cd "$(gitw-get 2>/dev/null)/.."
fi

# Make sure we are inside a bare repo before proceeding
if ! is_bare_repo=$(git rev-parse --is-bare-repository 2>&1); then true; fi
if [[ $is_bare_repo != "true" ]]; then
    error "Must be run in a worktree or bare repository!"
    exit 1
fi

# If the worktree already exists, switch to it
if [[ -d $converted_name ]]; then
    info "Switching to worktree..."
    cd "$converted_name" || exit
    sleep 0.3
    tmux-sessionizer "$(pwd)" "$@"
    exit $?
fi

# If we get to this point, the branch hasn't been checked out into a worktree yet
# When running `git fetch` remote branch info will be fetched, meaning theses branches
# will appear as if they have been created locally when we run `git branch` below.
info "Running git fetch..."
if ! output=$(git -c color.ui=always fetch 2>&1); then
    >&2 echo "$output"
    exit 1
else
    if [[ -n "$output" ]]; then
        >&2 echo "$output"
    fi
fi
>&2 echo

base_branch=$(git-get-base-branch)

# Create or reset the branch at this point. Any commits in this branch that
# don't match what's in the remote will be removed. I don't think this will
# cause any problems for my workflow, as I always associate a branch with a
# physical checkout.
local_branch_arg="-B $branch_name"

# If this branch exists remotely, set up tracking info for the local branch
remote_tracking_arg=
if git branch -r | grep "\w*$branch_name\$" >/dev/null; then
    remote_tracking_arg="--track origin/$branch_name"
fi

# Create a new worktree using the converted name whilst checking out the branch
info "Creating worktree..."
# shellcheck disable=SC2068,SC2086
if ! output=$(git worktree add "$converted_name" $local_branch_arg $remote_tracking_arg 2>&1); then
    error "$output"
    exit 1
else
    if [[ -n "$output" ]]; then
        >&2 echo "$output"
    fi
fi

# Enter the new worktree
cd "$converted_name" || exit

# Post checkout steps
current_dir=$(pwd)
base_worktree=$(gitw-get 2>/dev/null)
if [[ -f "poetry.lock" ]]; then
    >&2 echo
    info "Running poetry install..."
    >&2 echo
    # We need to deactivate the current virtual environment otherwise poetry install
    # will install packages into the current virtual environment instead of the new
    # one we want to create for the new worktree.
    if [[ -n "$VIRTUAL_ENV" ]]; then deactivate; fi
    if ! poetry install --all-extras >/dev/stderr 2>&1; then true; fi
elif [[ -f "pyproject.toml" ]]; then
    >&2 echo
    info "Running uv pip install with pyproject.toml..."
    >&2 echo
    if ! uv venv >/dev/stderr 2>&1; then true; fi
    # Install the project
    if ! uv pip install . >/dev/stderr 2>&1; then true; fi
    # Install any optional dependencies like dev dependencies
    if ! uv pip install -r pyproject.toml --all-extras >/dev/stderr 2>&1; then true; fi
fi

>&2 echo
success "Successfully created worktree!"

>&2 echo
info "Switching to worktree..."
sleep 0.3
tmux-sessionizer "$(pwd)" "$@"
