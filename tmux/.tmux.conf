#############
## OPTIONS ##
#############

# Reduce <ESC> delay for vim inside tmux
set-option -sg escape-time 10

# Set prefix for all tmux commands
set -g prefix C-s

# Renumber windows when they get moved
set -g renumber-windows on

# Don't exit from tmux when closing a session
set -g detach-on-destroy off

# Use non-login shells
#
# From: https://wiki.archlinux.org/title/tmux#Start_a_non-login_shell
set -g default-command "${SHELL}"

# Increase size of scollback buffer for searching in copy-mode
set-option -g history-limit 50000

# NOTE: focus-events seems to cause the `I` bug for fzf
# stuff within vim. I don't use fzf in neovim so I have enabled it below
set -g focus-events on

# Act like vim
setw -g mode-keys vi

# Move the statusline to the bottom
set -g status-position bottom

# Mouse mode to alter windows
setw -g mouse on

# Start window numbers at 1
set -g base-index 1

# Allow programs in the pane to bypass tmux using a terminal escape sequence.
# This means I can display images inside tmux inside the kitty terminal
set -g allow-passthrough on

# Needed to ensure tmux uses 256 colours
#
# From:
#  - https://wiki.archlinux.org/title/tmux#256_colors
#  - https://www.reddit.com/r/vim/comments/75zvux/why_is_vim_background_different_inside_tmux/
set -g default-terminal "${TERM}"
if-shell -b '[ "$TERM" = "xterm-256color" ]' {
    set-option -sa terminal-overrides ",xterm-256color:RGB"
} {
    set-option -sa terminal-overrides ",xterm-kitty:RGB"
}

# Make sure tmux keeps track of the correct cursor
#
# From: https://stackoverflow.com/a/42118416
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# Undercurl support (works with kitty)
#
# After reloading the configuration, you also have to kill the tmux session for
# these changes to take effect
# undercurl support
#
# From: https://linkarzu.com/posts/neovim/markdown-setup-2024/#fix-undercurl-in-tmux
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# underscore colours - needs tmux-3.0
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# Refresh the window name every 1 second
set-option -g status-interval 1
set-option -g automatic-rename on

###########
## BINDS ##
###########

# Reload config
unbind r
bind r display-message "Sourcing ~/.tmux.conf..." \; source-file ~/.tmux.conf \; display-message "Sourced ~/.tmux.conf"

# Add current session to the session save file
bind C-a run-shell "echo #{session_name} >> ~/.tmux-save-sessions && tmux display-message 'Added #{session_name} to saved sessions!'"

# Allow home and end keys to work
#
# From https://stackoverflow.com/a/55616731
bind-key -n Home send Escape "OH"
bind-key -n End send Escape "OF"

# Make sure new windows open using the current pane path
bind c new-window -a -c "#{pane_current_path}"

# Switch to the last attached tmux session
bind C-p switch-client -l

# Navigate windows
bind-key C-h select-window -t :-
bind-key C-l select-window -t :+

# Go to the right-most window
bind-key 0 select-window -t '{end}'

# Set easier window split keys
bind x split-window -v -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"

# Move current window position left/right
bind-key -r . swap-window -t :+1 \; next-window
bind-key -r , swap-window -t :-1 \; previous-window

# Toggle zoom for the current pane
bind-key -n C-z resize-pane -Z

# Kill windows, panes and sessions without confirmation
bind-key q kill-window
bind-key C-o kill-window -a
bind-key o kill-pane -a
bind-key w kill-session

# Resize the current pane
bind -r j resize-pane -D 5
bind -r k resize-pane -U 5
bind -r h resize-pane -L 5
bind -r l resize-pane -R 5

# Create a new session
bind n command-prompt -p "Session name:" 'run-shell "$HOME/.local/bin/tmux-create-session '%1'"'

# Search through tmux sessions in a fuzzy finder
bind C-s run-shell -b "$HOME/.local/bin/tmux-sessionizer"

# Edit persisted active tmux sessions
bind C-e display-popup -E "tmux-edit-saved-sessions"

# Quick jump to specific sessions
bind C-g run-shell -b "$HOME/.local/bin/tmux-sessionizer github"
bind C-d run-shell -b "$HOME/.local/bin/tmux-sessionizer dotfiles"
bind C-n run-shell -b "$HOME/.local/bin/tmux-sessionizer notes"
bind C-b run-shell -b "$HOME/.local/bin/tmux-sessionizer $(basename \"$TMUX_CURRENT_DIR\")"

# Kill all sessions before saving and killing the server
bind-key C-q command-prompt -p "Do you wish to quit tmux? [Enter to confirm or Ctrl-C to cancel]" 'run-shell "$HOME/.local/bin/tmux-quit"'

# Open contents of pane in neovim
bind-key C-v split-window -h 'tmux capture-pane -t:.- -Jp -S- | nvim - -R +"normal! GG"' \; resize-pane -Z

# Enter copy mode
bind-key C-c copy-mode

# Enter copy mode and scroll half a page up
bind-key C-u copy-mode \; send -X halfpage-up

# Setup vim like yank binds
unbind-key -T copy-mode-vi v
bind-key -T copy-mode-vi v \
  send-keys -X begin-selection
bind-key -T copy-mode-vi 'C-v' \
  send-keys -X rectangle-toggle

# Jump to start/end of line in copy mode
bind -T copy-mode-vi L send-keys -X end-of-line
bind -T copy-mode-vi H send-keys -X start-of-line

# Incremental search
#
# From: https://www.reddit.com/r/tmux/comments/arv927/incremental_search_in_copymodevi/
bind-key -T copy-mode-vi / command-prompt -i -I "#{pane_search_string}" -p "(search up)" "send -X search-backward-incremental \"%%%\""
bind-key -T copy-mode-vi / copy-mode \; command-prompt -i -I "#{pane_search_string}" -p "(search up)" "send -X search-backward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -I "#{pane_search_string}" -p "(search down)" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? copy-mode \; command-prompt -i -I "#{pane_search_string}" -p "(search down)" "send -X search-forward-incremental \"%%%\""

# From: https://stackoverflow.com/questions/66430860/on-tmux-2-4-how-to-enter-copy-mode-and-start-a-search-all-in-one-go
bind-key / copy-mode \; command-prompt -i -I "#{pane_search_string}" -p "(search up)" "send -X search-backward-incremental \"%%%\""

# From https://www.reddit.com/r/vim/comments/12eg832/is_there_a_way_to_have_vim_objects_in_tmux/
bind -T copy-mode-vi i switch-client -T copyModeMultiKey_i
bind -T copyModeMultiKey_i w send-keys -X select-word
bind -T copyModeMultiKey_i W send-keys -X clear-selection \; send-keys -X previous-space \; send-keys -X begin-selection \; send-keys -X next-space-end
bind -T copyModeMultiKey_i b send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i ( send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i ) send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i B send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i \{ send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i \} send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i [ send-keys -X clear-selection \; send-keys -X jump-to-backward '[' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ']'
bind -T copyModeMultiKey_i ] send-keys -X clear-selection \; send-keys -X jump-to-backward '[' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ']'
bind -T copyModeMultiKey_i < send-keys -X clear-selection \; send-keys -X jump-to-backward '<' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '>'
bind -T copyModeMultiKey_i > send-keys -X clear-selection \; send-keys -X jump-to-backward '<' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '>'
bind -T copyModeMultiKey_i ` send-keys -X clear-selection \; send-keys -X jump-to-backward '`' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '`'
bind -T copyModeMultiKey_i \' send-keys -X clear-selection \; send-keys -X jump-to-backward "'" \; send-keys -X begin-selection \; send-keys -X jump-to-forward "'"
bind -T copyModeMultiKey_i \" send-keys -X clear-selection \; send-keys -X jump-to-backward '"' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '"'

# Smart pane switching with awareness of Vim splits.
#
# I have to add this explicitly since `christoomey/vim-tmux-navigator` stopped working
# with my setup after some recent changes that were made to it
#
# From: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

#############
## PLUGINS ##
#############

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'dcrblack/tmux-onedark-theme'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-yank'

# Stay in copy mode after yanking
set -g @yank_action 'copy-pipe'

# Change default binds to save and restore the tmux environment
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'

# Automatically restore tmux windows when tmux starts
set -g @continuum-restore 'on'

# Preserve what was readable in each pane
set -g @resurrect-capture-pane-contents 'on'

# Restore extra programs
#
# From: https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_programs.md
set -g @resurrect-processes '~nvim "~gh dash" "~gh notify"'

# Don't show the current directory name in window names
setenv -g SHOW_DIRECTORY_NAME 0

# Show that the current session is saved in the sessions file
set -g @onedark_session_widgets "#(grep -E #{session_name} ~/.tmux-save-sessions && echo '* ' || echo ' ')"

# Use tmux-fzf for picking sessions and windows
TMUX_FZF_PREVIEW=0
TMUX_FZF_OPTIONS="-p -w 100% -h 99% -m"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
