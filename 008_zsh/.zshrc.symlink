# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="amuse"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
export EDITOR='vim'

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Global variables used in my installers and dotfiles
export MY_PYTHON_VERSION=3.11.0
export MY_POETRY_VERSION=1.3.2
export MY_NODE_VERSION=19.0.0
export MY_GO_VERSION=1.19.5

# Setup node version manager
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Setup Python version manager
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# Add brew to path if running on macos
if [[ $OSTYPE == "darwin"* ]]; then
    export HOMEBREW_PREFIX="/opt/homebrew";
    export HOMEBREW_CELLAR="/opt/homebrew/Cellar";
    export HOMEBREW_REPOSITORY="/opt/homebrew";
    export PATH="/opt/homebrew/bin:/opt/homebrew/sbin${PATH+:$PATH}";
    export MANPATH="/opt/homebrew/share/man${MANPATH+:$MANPATH}:";
    export INFOPATH="/opt/homebrew/share/info:${INFOPATH:-}";
fi

# Add poetry binary to path
export PATH="$HOME/.local/bin:$PATH"

# Add golang to path
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$HOME/go/bin

# Add rust stuff to path
export PATH="$HOME/.cargo/bin:$PATH"

# Set theme for bat
export BAT_THEME="TwoDark"

# Setup fzf to use ripgrep for search and to use ~/.gitignore
export FZF_DEFAULT_COMMAND='rg --files --hidden --color=never --ignore-file ~/.gitignore --ignore-file .gitignore --glob ""'

# Some aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

function gitwadd() {
    local branch_name="$1"
    trimmed_name=$(echo $branch_name | cut  -d'/' -f2-)
    echo $trimmed_name
    git w add $trimmed_name
    cd $trimmed_name
    git branch -m $branch_name
}

function gitprcreate() {
    gh pr create --head $(git branch --show-current) --assignee "@me" "$@"
}

# From https://github.com/tpope/vim-obsession/issues/11
# Auto start vim-obession when starting vim with no args
function vim() {
    if test -d "$1"; then
        cd "$1"
        if test -f Session.vim; then
            env vim -S
        else
            env vim -c Obsession .
        fi
    elif test $# -gt 0; then
        env vim "$@"
    elif test -f Session.vim; then
        env vim -S
    else
        env vim -c Obsession
    fi
}

# Delete all git worktrees in current directory that contain sc-TICKET_NUMBER
function gitwdeleteall() {
    echo "Deleting worktrees"
    find . -name "*-sc-[0-9]*" -maxdepth 1 | xargs -L 1 git w remove
    echo "Deleting worktree branches"
    git branch -D $(git branch)
}

# Expose current dir of where tmux was ran to tmux
function tmux() { 
    TMUX_CURRENT_DIR="${PWD}" command tmux "$@"
}

# Get just the name of the current git repository
function getreponame() {
    basename -s .git $(git config --get remote.origin.url)
}

# Get test name of the test container for the current repo
function gettestcontainer() {
    reponame=$(getreponame)
    testcontainer=$(docker ps | grep $reponame | grep _test_run | awk '{print $NF}' | head -n 1)

    if [[ -z $testcontainer ]]; then
        >&2 echo "ERROR: No test container found for $reponame"
        return 1
    fi

    echo $testcontainer
}
