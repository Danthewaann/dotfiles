set nocompatible              " required
filetype off                  " required

" Must define this before loading vimspector
let g:vimspector_enable_mappings = 'HUMAN'

let my_node_path = '~/.nvm/versions/node/v' . expand('$MY_NODE_VERSION') . '/bin/node'

" Only set this if node is available
if !empty(glob(my_node_path))
    let g:coc_node_path = my_node_path
else
    let g:coc_start_at_startup = 0
endif


" Set config location to home
let g:coc_config_home = '~/'

" Set global coc extensions
let g:coc_global_extensions = [
            \'coc-eslint',
            \'coc-prettier',
            \'coc-sh',
            \'coc-go',
            \'coc-tsserver',
            \'coc-json',
            \'coc-pyright',
            \'coc-git',
            \'coc-css',
            \'coc-html',
            \'coc-toml',
            \'coc-clangd',
            \'coc-rust-analyzer'
            \]

set nobackup
set nowritebackup

call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'joshdick/onedark.vim'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-test/vim-test'
Plug 'tpope/vim-dispatch'
Plug 'voldikss/vim-floaterm'
Plug 'vim-autoformat/vim-autoformat'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-commentary'
Plug 'michaeljsmith/vim-indent-object'
Plug 'puremourning/vimspector'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'mfukar/robotframework-vim'
Plug 'godlygeek/tabular'
Plug 'xolox/vim-misc'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'djoshea/vim-autoread'
Plug 'fatih/vim-go'
Plug 'moll/vim-bbye'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-obsession'
Plug 'romainl/vim-cool'
Plug 'sheerun/vim-polyglot'
Plug 'jgdavey/tslime.vim'
Plug 'kshenoy/vim-signature'
Plug 'pixelneo/vim-python-docstring'
Plug 'pechorin/any-jump.vim'

" Need to also install this for searching through files
" https://github.com/ggreer/the_silver_searcher
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" Auto-completion for quotes, parens, brackets, etc.
Plug 'Raimondi/delimitMate'

" Must be loaded last
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'PhilRunninger/nerdtree-visual-selection'

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting

" GENERAL ===================================================================================================
syntax on
set history=10000
set splitbelow
set splitright
set encoding=utf-8
set rnu nu
let mapleader = " " " map leader to Space

set mouse=a
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

if system('uname -s') == "Darwin\n"
    set clipboard=unnamed
else
    set clipboard=unnamedplus
endif

set noswapfile
set updatetime=200
set signcolumn=yes

" From https://stackoverflow.com/a/58042714
set ttimeout
set ttimeoutlen=1
set ttyfast

set textwidth=0
set wrapmargin=0
set incsearch
set hlsearch

" Make backspaces more powerful
set backspace=indent,eol,start

" Number of colors
set t_Co=256

" Hide instead of closing buffers. It allows hiding buffer with unsaved
" modifications and preserve marks and undo history.
set hidden

" Highlight the current line when in insert mode.
autocmd InsertEnter * set cul
autocmd InsertLeave * set nocul

" Jump to last position when reopening a file
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has("termguicolors"))
    set termguicolors
endif

set guifont=Hack_Nerd_Font_Mono:h16

" Set filetype for .robot files to enable syntax highlighting
autocmd BufNewFile,BufRead *.robot setlocal filetype=robot

" Allow gnome terminal to send alt keys to vim in the
" format that vim expects
" From https://stackoverflow.com/a/10216459
" NOTE: Need to manually disable shortcuts in gnome terminal as well
" let c='a'
" while c <= 'z'
" exec "set <A-".c.">=\e".c
" exec "imap \e".c." <A-".c.">"
" let c = nr2char(1+char2nr(c))
" endw
" set timeout ttimeoutlen=50

" move the current line up of down a line
" From https://vim.fandom.com/wiki/Moving_lines_up_or_down
" nnoremap <A-j> :m .+1<CR>==
" nnoremap <A-k> :m .-2<CR>==
" inoremap <A-j> <Esc>:m .+1<CR>==gi
" inoremap <A-k> <Esc>:m .-2<CR>==gi
" vnoremap <A-j> :m '>+1<CR>gv=gv
" vnoremap <A-k> :m '<-2<CR>gv=gv
vnoremap <silent><C-K> :m '<-2<CR>gv=gv
vnoremap <silent><C-J> :m '>+1<CR>gv=gv
inoremap <silent><C-K> <Esc>:m .+1<CR>==gi
inoremap <silent><C-J> <Esc>:m .-2<CR>==gi

" paste the clipboard contents in insert mode
inoremap <C-P> <C-R>+

" search for current word in window and highlight it
nnoremap <silent><leader>f :/<C-R><C-W><CR>:set hlsearch<CR>

" search for visual selection in current file
vnoremap <silent><leader>f y/\V<C-R>=escape(@",'/\')<CR><CR>:set hlsearch<CR>

" check path to python executable
function! GetPythonExc() abort
    if !empty(glob('.venv/bin/ipython')) && !isdirectory('.venv/bin/ipython')
        let python_path = '.venv/bin/ipython --no-autoindent --no-confirm-exit'
    elseif !empty(glob('.venv/bin/python')) && !isdirectory('.venv/bin/python')
        let python_path = '.venv/bin/python'
    else
        let python_path = 'python'
    endif
    return python_path
endfunction

" paste the visual selection into a python REPL
vnoremap <silent><expr><leader>p ':FloatermNew ' . GetPythonExc() . "\<CR>"

function! ReplaceCurrentWord()
    call inputsave()
    let replace = escape(input('Enter replacement: '),'/\')
    call inputrestore()
    execute '%s/' . expand("<cword>") . '/' . replace . '/g'
endfunction

function! GetVisualSelection()
    " Why is this not a built-in Vim script function?!
    " From https://stackoverflow.com/a/6271254
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)
    if len(lines) == 0
        return ''
    endif
    let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]
    return join(lines, "\n")
endfunction

function! ReplaceSelection()
    call inputsave()
    let replace = escape(input('Enter replacement: '),'/\')
    call inputrestore()
    let v = escape(GetVisualSelection(), '/\')
    execute '%s/' . v . '/' . replace . '/g'
endfunction

" replace current word in current file
nnoremap <silent><leader>rp :call ReplaceCurrentWord()<CR>

" replace visual selection in current file
vnoremap <silent><leader>rp :call ReplaceSelection()<CR>

" paste clipboard into a vim terminal
tnoremap <C-P> <C-W>"+

" exit the current window
nnoremap <silent><C-Q> :q<CR>

" exit vim completely
nnoremap <silent><leader>qa :qa!<CR>

" Treat Ctrl+C exactly like <Escape>.
imap <C-C> <Esc>

" vim-powered terminal in a split window
map <silent><C-T>s :term<CR>
tmap <silent><C-T>s <C-W>:term<cR>

" vim-powered terminal in a vertical split window
map <silent><C-T>v :vert term<CR>
tmap <silent><C-T>v <C-W>:vert term<CR>

" vim-powered terminal in new tab
map <silent><C-T>t :tab term<CR>
tmap <silent><C-T>t <C-W>:tab term<cR>

" enter normal-mode in vim terminal
tmap <C-X> <C-W>N

" open up a floaterm
nnoremap <silent><leader>vp :FloatermNew<CR>

" From https://gist.github.com/romainl/56f0c28ef953ffc157f36cc495947ab3
" Setup a way to keep track of breakpoint() calls in Python code
function! BreakpointQuickFixList()
	return system(join([&grepprg] + [' breakpoint\(\) -g "*.py" ./'], ' '))
endfunction

command! -nargs=0 BreakpointQuickFixList cgetexpr BreakpointQuickFixList()

augroup quickfix
	autocmd!
	autocmd QuickFixCmdPost cgetexpr cwindow
	autocmd QuickFixCmdPost lgetexpr lwindow
augroup END

" close the quicklist and git windows
function! ClearWindows() abort
    execute 'ccl'
    execute 'lcl'
    execute 'pclose'
    call s:close_gstatus()
endfunction

nnoremap <silent><leader>c :call ClearWindows()<CR>

" Use a line cursor within insert mode and a block cursor everywhere else.
"
" Reference chart of values:
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
" if exists('$TMUX')
"     let &t_SI .= "\<Esc>Ptmux;\<Esc>\<Esc>[6 q\<Esc>\\"
"     let &t_EI .= "\<Esc>Ptmux;\<Esc>\<Esc>[2 q\<Esc>\\"
" else
"     let &t_SI .= "\<Esc>[6 q"
"     let &t_EI .= "\<Esc>[2 q"
" endif

let &t_SI .= "\<Esc>[6 q"
let &t_EI .= "\<Esc>[2 q"

" Allow indenting the current line in normal mode
nnoremap <Tab> >>
nnoremap <S-Tab> <<

" Allow indenting the selected lines in visual mode
xnoremap <Tab> >gv
xnoremap <S-Tab> <gv

" Jump list (previous, next), needed as I'm using TAB for indentation
nnoremap < <C-O>
nnoremap > <C-I>

" COLOUR THEMES ===================================================================================================

" Don't show mode information as it is included in the statusline
set noshowmode

set background=dark
let g:airline_powerline_fonts = 1
let g:enable_bold_font = 1
let g:enable_italic_font = 1
let g:airline_theme = 'onedark'
let g:onedark_hide_endofbuffer = 1
colorscheme onedark

" NAVIGATION ===================================================================================================

" vertical navigation
nnoremap <C-D> <C-D>zz
nnoremap <C-J> <C-J>zz
nnoremap gg ggzz
nnoremap G Gzz
nnoremap { {zz
nnoremap } }zz

" window pane navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" terminal pane navigation

" These maps interfere with fzf.vim popup window navigation
" tnoremap <C-J> <C-W><C-J>
" tnoremap <C-K> <C-W><C-K>

tnoremap <C-L> <C-W><C-L>
tnoremap <C-H> <C-W><C-H>
tnoremap <C-Q> <C-D>

" tab navigation
nnoremap <silent><C-b> :tabprevious<CR>
nnoremap <silent><C-n> :tabnext<CR>
tnoremap <silent><C-b> <C-W>:tabprevious<CR>
tnoremap <silent><C-n> <C-W>:tabnext<CR>

" Use <C-j> & <C-k> to move through popup candidates
" inoremap <C-j> <C-n>
" inoremap <C-k> <C-p>

" Use <C-j> & <C-k> to move through wildmenu candidates
cnoremap <C-j> <Right>
cnoremap <C-k> <Left>

" Allow scrolling up and down in a popup (such as function docstring in Python)
" From https://github.com/neoclide/coc.nvim/issues/1405#issuecomment-570062098
function FindCursorPopUp()
    let radius = get(a:000, 0, 2)
    let srow = screenrow()
    let scol = screencol()
    " it's necessary to test entire rect, as some popup might be quite small
    for r in range(srow - radius, srow + radius)
        for c in range(scol - radius, scol + radius)
            let winid = popup_locate(r, c)
            if winid != 0
                return winid
            endif
        endfor
    endfor

    return 0
endfunction

function ScrollPopUp(down)
    let winid = FindCursorPopUp()
    if winid == 0
        return 0
    endif

    let pp = popup_getpos(winid)
    call popup_setoptions( winid,
                \ {'firstline' : pp.firstline + ( a:down ? 1 : -1 ) } )
    return 1
endfunction

nnoremap <expr> <c-d> ScrollPopUp(1) ? '<esc>' : '<c-d>zz'
nnoremap <expr> <c-u> ScrollPopUp(0) ? '<esc>' : '<c-u>zz'

" NERDTREE ===================================================================================================

" Set the NERDTree statusline
let NERDTreeStatusline="NERDTree"

" Remove bookmarks and help text from NERDTree
let g:NERDTreeMinimalUI = 1

" unmap <C-J> so we can use <C-J> for navigation.
let NERDTreeMapJumpNextSibling=""

" Set NERDTree window size
let g:NERDTreeWinSize=35

" open NERDTree
nnoremap <silent> <leader>nn :NERDTree<CR>

" close NERDTree
nnoremap <silent> <leader>nc :NERDTreeClose<CR>

" open NERDTree with buffer shown inside it
nnoremap <silent> <leader>nf :NERDTreeFind<CR>

" ignore files in NERDTree
let NERDTreeIgnore=['\.pyc$', '\~$']

" show hidden files
let NERDTreeShowHidden=1

" Center the NERDTree buffer when entering it
" From https://vi.stackexchange.com/questions/20619/nerdtree-maximize-on-enter
autocmd BufEnter NERD_tree_* normal zz

" Start NERDTree when Vim starts with a directory argument.
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
"     \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

" COC ===================================================================================================

" Disable transparent cursor
let g:coc_disable_transparent_cursor = 1

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :silent call CocActionAsync('format')

" use `:OR` for organize import of current buffer
command! -nargs=0 OR :silent call CocAction('runCommand', 'editor.action.organizeImport')

" organize imports on save
" au BufWritePre *.py :silent call CocAction('runCommand', 'editor.action.organizeImport')
" au BufWritePre *.ts :silent call CocAction('runCommand', 'editor.action.organizeImport')
" au BufWritePre *.js :silent call CocAction('runCommand', 'editor.action.organizeImport')

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
            \ coc#pum#visible() ? coc#pum#next(1) :
            \ CheckBackspace() ? "\<Tab>" :
            \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
else
    inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)zz
nmap <silent> ]g <Plug>(coc-diagnostic-next)zz

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)zz
nmap <silent> gy <Plug>(coc-type-definition)zz
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
        call CocActionAsync('doHover')
    else
        call feedkeys('K', 'in')
    endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
" nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>p  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>

" CTRL-P ===================================================================================================

let g:ctrlp_reuse_window = 'NERD'

" From https://elliotekj.com/posts/2016/11/22/setup-ctrlp-to-use-ripgrep-in-vim/
if executable("rg")
    set grepprg=rg\ --vimgrep\ --color=never
    let g:ctrlp_user_command = 'rg %s --files --hidden --color=never --ignore-file ~/.gitignore --ignore-file .gitignore --glob ""'
    let g:ctrlp_use_caching = 0
endif

let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'

" VIM-TEST ===================================================================================================

let test#strategy = "tslime"
let test#custom_runners = {"python": ["make"]}
let test#python#runner = 'make'
let test#python#pytest#options = '-vv'

function! MyGetPosition(path) abort
    let filename_modifier = get(g:, 'test#filename_modifier', ':.')
    let position = {}
    let position['file'] = fnamemodify(a:path, filename_modifier)
    let position['line'] = a:path == expand('%') ? line('.') : 1
    let position['col']  = a:path == expand('%') ? col('.') : 1
    return position
endfunction

function! MyDebugNearest() abort
    let position = MyGetPosition(expand("%"))
    let runner = test#determine_runner(position['file'])
    let lang = split(runner, '#')[0]
    let build_args = test#{runner}#build_position("nearest", position)
    if lang == 'go'
        " Need to reverse the build args for `delve test`
        " e.g. `-run 'TestCheckWebsites$' .pkg/concurrency` to
        " `.pkg/concurrency -- -run 'TestCheckWebsites$'`
        let args = build_args[1] . ' -- ' . build_args[0]
    else
        let args = join(build_args)
    endif
    call vimspector#LaunchWithSettings({'configuration': lang . ' - debug test', 'args': args})
endfunction

nnoremap <leader>dn :call MyDebugNearest()<CR>
nnoremap <silent> <leader>tn :TestNearest<CR>
nnoremap <silent> <leader>tf :TestFile<CR>
nnoremap <silent> <leader>ts :TestSuite<CR>
nnoremap <silent> <leader>tc :TestClass<CR>
nnoremap <silent> <leader>tl :TestLast<CR>
nnoremap <silent> <leader>tv :TestVisit<CR>

" VIM-FUGITIVE ===================================================================================================

nnoremap <silent><leader>gp :G push<CR>
nnoremap <silent><leader>gfp :G push --force<CR>

function! s:ToggleGstatus() abort
    for l:winnr in range(1, winnr('$'))
        if !empty(getwinvar(l:winnr, 'fugitive_status'))
            execute l:winnr.'close'
            return
        endif
    endfor
    keepalt Git
endfunction

nnoremap <silent><C-g> :call <SID>ToggleGstatus()<CR>

function! s:close_gstatus()
    for l:winnr in range(1, winnr('$'))
        if !empty(getwinvar(l:winnr, 'fugitive_status'))
            execute l:winnr.'close'
            return
        endif
    endfor
endfunction

command! GstatusClose :silent call s:close_gstatus()

" VIM-GITGUTTER ==================================================================================================

let g:gitgutter_sign_allow_clobber = 1

if executable("rg")
    let g:gitgutter_grep = 'rg --color=never'
endif

nmap ]c <Plug>(GitGutterNextHunk)zz
nmap [c <Plug>(GitGutterPrevHunk)zz
nmap cp <Plug>(GitGutterPreviewHunk)
nmap cu <Plug>(GitGutterUndoHunk)
omap ic <Plug>(GitGutterTextObjectInnerPending)
omap ac <Plug>(GitGutterTextObjectOuterPending)
xmap ic <Plug>(GitGutterTextObjectInnerVisual)
xmap ac <Plug>(GitGutterTextObjectOuterVisual)

let g:gitgutter_signs=0

" AUTOFORMAT =====================================================================================================

" TODO: Will need to install terraform for this to work.
" I don't use terraform at the moment so I'll keep this as is.
" Auto format terraform files on save
au BufWrite *.tf :Autoformat

" COMMENTARY =====================================================================================================

" Add support for commenting/uncommenting code
noremap <silent> <leader>/ :Commentary<CR>

" VIMSPECTOR =====================================================================================================

let g:vimspector_install_gadgets = [ 'debugpy', 'vscode-node-debug2', 'delve' ]
let g:vimspector_sidebar_width = 50
let g:vimspector_bottombar_height = 10

" for normal mode - the word under the cursor
nmap <leader>vi <Plug>VimspectorBalloonEval

" for visual mode, the visually selected text
xmap <leader>vi <Plug>VimspectorBalloonEval

nmap <leader><F11> <Plug>VimspectorUpFrame
nmap <leader><F12> <Plug>VimspectorDownFrame
nmap <leader>vb <Plug>VimspectorBreakpoints
nmap <leader>vd <Plug>VimspectorDisassemble

nnoremap <leader>vc <Plug>VimspectorContinue
nnoremap <leader>vr <Plug>VimspectorRestart
nnoremap <silent><leader>vq :VimspectorReset<CR>

let g:vimspector_sign_priority = {
            \    'vimspectorBP':             999,
            \    'vimspectorBPCond':         2,
            \    'vimspectorBPLog':          2,
            \    'vimspectorBPDisabled':     1,
            \    'vimspectorPC':             999,
            \    'vimspectorPCBP':           1001,
            \    'vimspectorCurrentThread':  1000,
            \    'vimspectorCurrentFrame':   1000,
            \ }

" Custom stuff for adding breakpoint() statements
" From https://gist.github.com/berinhard/523420
func! s:SetBreakpoint()
    cal append('.', repeat(' ', strlen(matchstr(getline('.'), '^\s*'))) . 'breakpoint()')
endf

func! s:RemoveBreakpoint()
    exe 'silent! g/^\s*breakpoint()/d'
endf

func! s:ToggleBreakpoint()
    if getline('.')=~#'^\s*breakpoint()' | cal s:RemoveBreakpoint() | el | cal s:SetBreakpoint() | en
endf

nnoremap <silent> <leader>i :call <SID>ToggleBreakpoint()<CR>

" VIM-MARKDOWN ===================================================================================================

let g:vim_markdown_folding_disabled = 1

" VIM-BBYE =======================================================================================================

" Close the current buffer without closing the window
nnoremap <silent><leader>db :Bdelete<CR>

" Delete all buffers except the current one
" From https://stackoverflow.com/questions/4545275/vim-close-all-buffers-but-this-one
command! BufOnly silent! execute "%bd|e#|bd#"
nnoremap <silent><leader>dab :BufOnly<CR>

" VIM-FZF ========================================================================================================

" open up a fzf files window
nnoremap <silent><C-F> :Files<CR>

" search in all project files
nnoremap <leader>F :Rg<Space>

" search for visual selection in project files
vnoremap <silent><leader>F y:Rg <C-R>=escape(@",'/\')<CR><CR>

" show all buffers
nnoremap <silent><leader>b :Buffers<CR>

" show changed files
nnoremap <silent><leader>gs :GFiles?<CR>

" show commits
nnoremap <leader>gl :Commits<CR>

" use colours from the current colour scheme
let g:fzf_colors = {
            \ 'fg':         ['fg', 'Normal'],
            \ 'bg':         ['bg', 'Normal'],
            \ 'preview-bg': ['bg', 'NormalFloat'],
            \ 'hl':         ['fg', 'Comment'],
            \ 'fg+':        ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
            \ 'bg+':        ['bg', 'CursorLine', 'CursorColumn'],
            \ 'hl+':        ['fg', 'Statement'],
            \ 'info':       ['fg', 'PreProc'],
            \ 'border':     ['fg', 'Ignore'],
            \ 'prompt':     ['fg', 'Conditional'],
            \ 'pointer':    ['fg', 'Exception'],
            \ 'marker':     ['fg', 'Keyword'],
            \ 'spinner':    ['fg', 'Label'],
            \ 'header':     ['fg', 'Comment'] }

" VIM-GO ==========================================================================================================

" Show godoc output in a popup window
let g:go_doc_popup_window = 1

" TSLIME ==========================================================================================================

let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1
let g:tslime_autoset_pane = 1

" VIM-SIGNATURE ===================================================================================================

" Highlight all marks and markers
let g:SignatureMarkTextHLDynamic = 1
let g:SignatureMarkerTextHLDynamic = 1

" VIM-DISPATCH ====================================================================================================

" Disable all mappings provided by vim-dispatch
let g:dispatch_no_maps = 1

" VIM-PYTHON-DOCSTRING ============================================================================================

" Generate docstring for def or class on current line
nnoremap <silent> <leader>ds :Docstring<CR>

" VIM-AIRLINE =====================================================================================================

" truncate the branch name
let g:airline#extensions#branch#format = 1
let g:airline#extensions#branch#displayed_head_limit = 10

" From https://www.reddit.com/r/vim/comments/crs61u/best_airline_settings/
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_close_button = 0 " remove 'X' at the end of the tabline
let g:airline#extensions#tabline#tabs_label = ''       " can put text here like BUFFERS to denote buffers (I clear it so nothing is shown)
let g:airline#extensions#tabline#buffers_label = ''    " can put text here like TABS to denote tabs (I clear it so nothing is shown)
let g:airline#extensions#tabline#fnamemod = ':t'       " disable file paths in the tab
let g:airline#extensions#tabline#show_tab_count = 0    " dont show tab numbers on the right
let g:airline#extensions#tabline#show_buffers = 0      " dont show buffers in the tabline
" let g:airline#extensions#tabline#tab_min_count = 2     " minimum of 2 tabs needed to display the tabline
let g:airline#extensions#tabline#show_splits = 0       " disables the buffer name that displays on the right of the tabline
let g:airline#extensions#tabline#show_tab_nr = 0       " disable tab numbers
let g:airline#extensions#tabline#show_tab_type = 0     " disables the weird ornage arrow on the tabline

" VIM-ANY-JUMP ====================================================================================================

" Prefered search engine: rg or ag
let g:any_jump_search_prefered_engine = 'rg'

" Show line numbers in search rusults
let g:any_jump_list_numbers = 1

" Auto group results by filename
" let g:any_jump_grouping_enabled = 1

" CHEATSHEET ======================================================================================================
"
" ga -> get encoding of character at cursor
" gq<CR> -> autoformat current paragraph
" gqq -> autoformat current line
" gf -> open path at cursor or selection
" gi -> go back to the last place you were in insert mode
" gu -> lowercase text object
" gU -> uppercase text object
" ~ -> change case of current character
" J -> join lines
" g& -> run last substitution on the whole file
" g_ -> move to last blank character in the line (like $)
" _ -> move to the first blank character in the line (like 0)
"
" ap, ip -> operate on continuous lines
"
" gcc -> comment out a line
" gcap -> comment of the current paragraph
" gcgc -> uncomment adjacent lines
"
" Edit multiple lines (add double quote to end of each line) - V -> :s/$/” -> <CR>
"
" Replace a word in a file selectively
" /word -> cgn -> replacement -> <CR> -> . (to repeat)
"
" :Obess to start recording you vim session to a Session.vim file in current directory
"
" To surround a visual selection in quotes highlight your selection and then press S<quote>
