#!/usr/bin/env bash

set -e

CUR_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

source "$CUR_DIR/_git-common"

# Delete all git worktrees in current bare repository
if ! is_bare_repo=$(git rev-parse --is-bare-repository 2>&1); then true; fi
if [[ $is_bare_repo != "true" ]]; then
    while IFS=$'\n' read -r dir; do
        # If this directory is a bare git repository, run this command against that repo
        if ls "$dir"/.bare > /dev/null 2>&1; then
            cd "$dir"
            if ! gitw-delete-all "$@"; then true; fi
        fi
    done < <(find "$(pwd)" -mindepth 1 -maxdepth 1 -type d)
fi

info "Checking for git worktrees in $(pwd)"
worktrees=()
while IFS='' read -r line; do worktrees+=("$line"); done < <(git worktree list | grep -vE "(\[main\]|\[master\]|\(bare\))" | cut -d' ' -f1)
if [[ ${#worktrees[@]} -eq 0 ]]; then
    error_no_level "No worktrees to delete" 2>&1 | indent
    >&2 echo
    exit 1
fi

got_error=0
for worktree in "${worktrees[@]}"; do
    echo -en "${BLUE_BOLD}$(basename "$worktree")${NC} : " | indent
    # Check if I have opened a PR for the current branch
    if gh pr list --author "@me" | grep "$(cd "$worktree" && git branch --show-current)" > /dev/null 2>&1; then
        warn_no_level "A PR is open for this worktree, skipping"
        >&2 echo
        continue
    fi
    if ! result=$(git worktree remove "$worktree" "$@" 2>&1); then
        error_no_level "Failed to delete"
        error_no_level "$result" 2>&1 | indent | indent
        >&2 echo
        got_error=1
        continue
    fi
    success "Successfully deleted"
    >&2 echo
done

if [[ $got_error -ne 0 ]]; then
    exit 1
fi
