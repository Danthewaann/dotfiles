#!/usr/bin/env bash

set -uoe pipefail

CUR_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

source "$CUR_DIR/_git-common"

args=()

if [[ $OSTYPE == "darwin"* ]]; then
    SED="gsed"
else
    SED="sed"
fi

function usage() {
    gh pr edit --help
}

while [[ $# -gt 0 ]]; do
    case $1 in
    -h|--help)
        usage
        exit 2
        ;;
    *)
        args+=("$1")
        shift
        ;;
    esac
done

# If a PR file already exists (if a previous attempt to create a PR has failed) use that file instead
existing_old_pr_files=()
while IFS=$'\n' read -r file; do existing_old_pr_files+=("$file"); done < <(find ./git-pr-edit*old* | sort --reverse)

existing_new_pr_files=()
while IFS=$'\n' read -r file; do existing_new_pr_files+=("$file"); done < <(find ./git-pr-edit*new* | sort --reverse)

if [[ "${#existing_new_pr_files[@]}" -gt 0 ]]; then
    old_pr_file_name="${existing_old_pr_files[0]}"
    new_pr_file_name="${existing_new_pr_files[0]}"
    info "Using existing PR file: $new_pr_file_name"
    sleep 1

    if [[ $OSTYPE == "darwin"* ]]; then
        old_file_md5=$(md5 -q "$old_pr_file_name")
    else
        old_file_md5=$(md5sum "$old_pr_file_name" | cut -d' ' -f1)
    fi

    $EDITOR "$new_pr_file_name"
else
    repo_labels=()
    while IFS=$'\n' read -r label; do repo_labels+=("$label"); done < <(gh label list --json name --jq '.[].name' --limit 100)

    cur_time=$(date +%s)
    old_pr_file_name=git-pr-edit."$cur_time".old.md
    new_pr_file_name=git-pr-edit."$cur_time".new.md

    content=$(gh pr view --json title --json body --json labels)
    title=$(echo "$content" | jq -r .title)
    body=$(echo "$content" | jq -r .body)

    labels=()
    while IFS=$'\n' read -r label; do labels+=("$label"); done < <(echo "$content" | jq -r .labels[].name)

    echo -e "--- TITLE\n$title\n--- END\n" > "$old_pr_file_name"
    echo -e "--- TITLE\n$title\n--- END\n" > "$new_pr_file_name"
    echo -e "--- EXISTING LABELS" >> "$old_pr_file_name"
    echo -e "--- EXISTING LABELS" >> "$new_pr_file_name"
    for label in "${repo_labels[@]}"; do
        echo "$label" >> "$old_pr_file_name"
        echo "$label" >> "$new_pr_file_name"
    done
    echo -e "--- END\n" >> "$old_pr_file_name"
    echo -e "--- END\n" >> "$new_pr_file_name"

    echo -e "--- LABELS" >> "$old_pr_file_name"
    echo -e "--- LABELS" >> "$new_pr_file_name"
    for label in "${labels[@]}"; do
        echo "$label" >> "$old_pr_file_name"
        echo "$label" >> "$new_pr_file_name"
    done
    echo -e "--- END\n" >> "$old_pr_file_name"
    echo -e "--- END\n" >> "$new_pr_file_name"

    echo -e "--- BODY\n" >> "$old_pr_file_name"
    echo -e "--- BODY\n" >> "$new_pr_file_name"
    echo "$body" >> "$old_pr_file_name"
    echo "$body" >> "$new_pr_file_name"
    echo -e "--- END\n" >> "$old_pr_file_name"
    echo -e "--- END\n" >> "$new_pr_file_name"

    if [[ $OSTYPE == "darwin"* ]]; then
        old_file_md5=$(md5 -q "$old_pr_file_name")
    else
        old_file_md5=$(md5sum "$old_pr_file_name" | cut -d' ' -f1)
    fi

    $EDITOR "$new_pr_file_name"
fi

if [[ $OSTYPE == "darwin"* ]]; then
    new_file_md5=$(md5 -q "$new_pr_file_name")
else
    new_file_md5=$(md5sum "$new_pr_file_name" | cut -d' ' -f1)
fi

if [[ "$old_file_md5" == "$new_file_md5" ]]; then
    >&2 echo -e "\nNo PR created!"
    rm -f "$old_pr_file_name"
    rm -f "$new_pr_file_name"
    exit 1
fi

# Use sed address ranges to extract each section
# From: https://www.baeldung.com/linux/print-lines-between-two-patterns
new_title=$($SED -n '/--- TITLE/, /--- END/{ /--- TITLE/! { /--- END/! p } }' < "$new_pr_file_name")

new_labels=()
while IFS=$'\n' read -r label; do new_labels+=("--add-label" "$label"); done < <($SED -n '/--- LABELS/, /--- END/{ /--- LABELS/! { /--- END/! p } }' < "$new_pr_file_name")

# Delete labels that are not in the original labels for the PR
for label in "${labels[@]}"; do
    if [[ ! " ${new_labels[*]} " =~ " ${label} " ]]; then
        new_labels+=("--remove-label" "$label")
    fi
done

new_body=$($SED -n '/--- BODY/, /--- END/{ /--- BODY/! { /--- END/! p } }' < "$new_pr_file_name")

if ! output=$(gh pr edit \
    --title "$new_title" \
    --body "$new_body" \
    "${new_labels[@]}" \
    "${args[@]}" 2>&1); then
    >&2 echo
    error "$output\n"
    warn "PR file written to $new_pr_file_name"
    exit 1
fi

rm -f "$old_pr_file_name"
rm -f "$new_pr_file_name"
