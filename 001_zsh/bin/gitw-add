#!/bin/bash

set -e

args=()
branch_name=
checkout_only=0

function usage() {
    cat <<-END
branch_name      name of the branch to create
--checkout-only  only checkout the branch
END
}

while [[ $# -gt 0 ]]; do
    case $1 in
    -h|--help)
        usage
        exit
        ;;
    --checkout-only)
        checkout_only=1
        shift
        ;;
    *)
        args+=("$1")
        shift
        ;;
    esac
done

>&2 echo

if ! is_bare_repo=$(git rev-parse --is-bare-repository 2>&1); then true; fi
if [[ $is_bare_repo != "true" ]]; then
    >&2 echo "ERROR: Must be run in a bare repository"
    exit 1
fi

set -- "${args[@]}"

branch_name="$1"; shift

if [[ -z $branch_name ]]; then
    >&2 echo "ERROR: must provide a branch name"
    exit 1
fi

# Remove the first path segment if branch name contains forward slashes
trimmed_name=$(echo "$branch_name" | cut -d'/' -f2-)

# Convert all forward slashes to dashes
converted_name=${trimmed_name//\//-}

# Create a new worktree using the converted name
git worktree add "$converted_name" "$@"

>&2 echo

# Enter the new worktree
cd "$converted_name" || exit

# Attempt to rename worktree branch to use the correct branch name
if ! output=$(git branch -m "$branch_name" 2>&1); then
    # If the branch name already exists, check it out instead of creating it
    if [[ $output == *"already exists"* ]]; then
        >&2 echo "Branch '$branch_name' already exists"
        git checkout "$branch_name"
    fi
else
    # Check if the branch exists remotely, if it does hard reset to it
    >&2 echo "Branch '$branch_name' exists remotely, hard resetting"
    if git branch -r | grep "$branch_name" > /dev/null 2>&1; then
        git reset --hard origin/"$branch_name"
    fi
fi

# Optional post checkout steps
if [[ $checkout_only -ne 1 ]]; then
    if [[ -f "poetry.lock" ]]; then
        >&2 echo
        >&2 echo "========================"
        >&2 echo "Running poetry install"
        >&2 echo "========================"
        >&2 echo
        poetry install
    fi

    if [[ -f "pyproject.toml" ]] && [[ -f "$HOME/pyrightconfig.json" ]]; then
        >&2 echo
        >&2 echo "==============================="
        >&2 echo "Linking pyrightconfig.json file"
        >&2 echo "==============================="
        >&2 echo
        ln -s "$HOME/pyrightconfig.json" "pyrightconfig.json"
    fi
fi

>&2 printf "\nCreated worktree '%s'\n" "$converted_name"
