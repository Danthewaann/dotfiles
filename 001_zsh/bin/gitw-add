#!/bin/bash

set -eo pipefail

CUR_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

source "$CUR_DIR/_git-common"

args=()
branch_name=
checkout_only=0
copy_venv=0

function usage() {
    cat <<-END
branch_name      name of the branch to create
--checkout-only  only checkout the branch
--copy           copy .venv from base worktree into new worktree
END
}

while [[ $# -gt 0 ]]; do
    case $1 in
    -h|--help)
        usage
        exit
        ;;
    --checkout-only)
        checkout_only=1
        shift
        ;;
    --copy)
        copy_venv=1
        shift
        ;;
    *)
        args+=("$1")
        shift
        ;;
    esac
done

>&2 echo

if ! is_bare_repo=$(git rev-parse --is-bare-repository 2>&1); then true; fi
if [[ $is_bare_repo != "true" ]]; then
    error "Must be run in a bare repository!"
    exit 1
fi

set -- "${args[@]}"

branch_name="$1"; shift

if [[ -z $branch_name ]]; then
    error "Must provide a branch name"
    exit 1
fi

info "Running git fetch..."
git fetch 2>&1 | indent
>&2 echo

# Remove the first path segment if branch name contains forward slashes
trimmed_name=$(echo "$branch_name" | cut -d'/' -f2-)

current_dir=$(pwd)

# Convert all forward slashes to dashes
converted_name=${trimmed_name//\//-}

info "Creating worktree..."
# Create a new worktree using the converted name
git worktree add "$converted_name" "$@" 2>&1 | indent
>&2 echo

# Enter the new worktree
cd "$converted_name" || exit

info "Creating branch..."
>&2 echo

# Attempt to rename worktree branch to use the correct branch name
if ! output=$(git branch -m "$branch_name" 2>&1); then
    # If the branch name already exists, check it out instead of creating it
    if [[ $output == *"already exists"* ]]; then
        info "Branch '$branch_name' exists locally, switching to it" | indent
        if ! output=$(git checkout "$branch_name" 2>&1); then
            error "Failed to checkout branch : $output" | indent
            exit 1
        fi
        if ! output=$(git rev-parse --abbrev-ref "$branch_name@{upstream}" 2>&1); then
            info "Branch '$branch_name' has no upstream set, setting to 'origin/$branch_name'" | indent
            if ! output=$(git branch --set-upstream-to=origin/"$branch_name" 2>&1); then
                warn "Failed to set upstream for branch : $output" | indent
            fi
        fi
    fi
# Check if the branch exists remotely, if it does set it as upstream and hard reset to it
elif git branch -r | grep "$branch_name" > /dev/null 2>&1; then
    info "Branch '$branch_name' exists remotely, setting as upsteam and hard resetting to it" | indent
    if ! output=$(git branch --set-upstream-to=origin/"$branch_name" 2>&1); then
        error "Failed to set upstream to branch : $output" | indent
        exit 1
    fi
    if ! output=$(git reset --hard origin/"$branch_name" 2>&1); then
        error "Failed to hard reset branch : $output" | indent
        exit 1
    fi

    >&2 echo
    info "Running git pull..."
    git pull
fi

>&2 echo

# Optional post checkout steps
if [[ $checkout_only -ne 1 ]]; then
    base_worktree=$(gitw-get-base)
    if [[ $copy_venv -eq 1 ]] && [[ -d "../$base_worktree/.venv" ]]; then
        info "\nCopying ../$base_worktree/.venv to $converted_name/.venv"
        mkdir -p "$current_dir/$converted_name/.venv"
        # From https://www.zylk.net/en/web-2-0/blog/-/blogs/how-to-copy-files-in-linux-faster-and-safer-than-cp
        cd "$current_dir/$base_worktree/.venv"; tar cf - . | (cd "$current_dir/$converted_name/.venv"; tar xvf -) 2> /dev/null
        >&2 echo
    elif [[ -f "poetry.lock" ]]; then
        info "Running poetry install..."
        >&2 echo
        script -q /dev/null poetry install | indent
        >&2 echo
    fi

    if [[ -f "pyproject.toml" ]] && [[ -f "$HOME/pyrightconfig.json" ]] && ! [[ -f "pyrightconfig.json" ]]; then
        info "Linking pyrightconfig.json file..."
        >&2 echo 
        ln -s "$HOME/pyrightconfig.json" "pyrightconfig.json"
    fi
fi

>&2 echo -e "${GREEN_BOLD}Successfully created worktree!${NC}\n"
echo "${converted_name}"
