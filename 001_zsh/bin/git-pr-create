#!/usr/bin/env bash

set -oe pipefail

CUR_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

source "$CUR_DIR/_git-common"

set -u

prog=$(basename "$0")
args=()

# Github label to slack emoji associate array
declare -A pr_types=(
    [python]="python"
    [ruby]="ruby_prog"
    [go]="go"
    [docker]="docker"
    [documentation]="docs"
    [terraform]="terraform"
)

pr_type=
pr_title=
pr_is_draft=0
labels=()

if [[ $OSTYPE == "darwin"* ]]; then
    PBCOPY="pbcopy"
    SED="gsed"
else
    PBCOPY="xclip"
    SED="sed"
fi

function usage() {
    gh pr create --help
}

function pr_info() {
    slack_label=""
    content=$(gh pr view --json url --json labels --json title)
    url=$(echo "$content" | jq -r .url)
    pr_title=$(echo "$content" | jq -r .title)

    pr_labels=()
    while IFS=$'\n' read -r label; do pr_labels+=("$label"); done < <(echo "$content" | jq -r .labels[].name)

    # If a PR type was manually provided use that one
    if [[ -n $pr_type ]]; then
        slack_label=" :${pr_types[$pr_type]}:"
    else
        # Otherwise get the PR type label from the PR labels
        for label in "${pr_labels[@]}"; do
            if [[ " ${!pr_types[*]} " =~ " ${label} " ]]; then
                slack_label=" :${pr_types[$label]}:"
                break
            fi
        done
    fi

    if [[ $pr_is_draft -ne 0 ]]; then
        output=$(printf "%s\n:point_up:%s [Draft PR] %s\n" "$url" "$slack_label" "$pr_title")
    else
        output=$(printf "%s\n:point_up:%s %s\n" "$url" "$slack_label" "$pr_title")
    fi

    >&2 printf "\nThe below has been copied to your clipboard! ðŸ“‹\n\n"
    echo "$output"
    echo "$output" | $PBCOPY
}

while [[ $# -gt 0 ]]; do
    case $1 in
    -h|--help)
        usage
        exit 2
        ;;
    -l|--label)
        # shellcheck disable=SC2076
        if [[ " ${!pr_types[*]} " =~ " ${2} " ]]; then
            pr_type=$2
        fi
        labels+=("$2")
        shift; shift
        ;;
    -t|--title)
        pr_title="$2"
        shift; shift
        ;;
    -d|--draft)
        pr_is_draft=1
        args+=("$1")
        shift
        ;;
    *)
        args+=("$1")
        shift
        ;;
    esac
done

cur_branch=$(git branch --show-current)

# Check that this branch exists remotely
if ! git branch -r | grep "$cur_branch" > /dev/null 2>&1; then
    >&2 echo
    error "Branch doesn't exist on remote origin!"
    exit 1
fi

# Check if a PR has already been opened for the current branch
if pr_title=$(gh pr list | grep "$cur_branch" | cut -f2); then
    >&2 echo
    warn "A PR has already been opened for this branch"
    pr_info
    exit 1
fi

# If a PR file already exists (if a previous attempt to create a PR has failed) use that file instead
existing_old_pr_files=()
while IFS=$'\n' read -r file; do existing_old_pr_files+=("$file"); done < <(find ./git-pr-create*old* 2> /dev/null | sort --reverse)

existing_new_pr_files=()
while IFS=$'\n' read -r file; do existing_new_pr_files+=("$file"); done < <(find ./git-pr-create*new* 2> /dev/null | sort --reverse)

if [[ "${#existing_new_pr_files[@]}" -gt 0 ]]; then
    old_pr_file_name="${existing_old_pr_files[0]}"
    new_pr_file_name="${existing_new_pr_files[0]}"
    info "Using existing PR file: $new_pr_file_name"
    sleep 1

    if [[ $OSTYPE == "darwin"* ]]; then
        old_file_md5=$(md5 -q "$old_pr_file_name")
    else
        old_file_md5=$(md5sum "$old_pr_file_name" | cut -d' ' -f1)
    fi

    $EDITOR "$new_pr_file_name"
else
    # Get list of labels that are available in the current repository
    repo_labels=()
    while IFS=$'\n' read -r label; do repo_labels+=("$label"); done < <(gh label list --json name --jq '.[].name' --limit 100)

    # Make sure that all of the provided labels are in `repo_labels`
    invalid_labels=()
    for label in "${labels[@]}"; do
        # shellcheck disable=SC2076
        if [[ ! " ${repo_labels[*]} " =~ " ${label} " ]]; then
            invalid_labels+=("$label")
        fi
    done

    # If we have an invalid labels we print an error and exit
    if [[ ${#invalid_labels[@]} -ne 0 ]]; then
        >&2 echo
        error "The following labels were not found in git repository"
        >&2 echo
        >&2 printf "invalid labels -> (%s)\n" "${invalid_labels[*]}"
        >&2 echo

        >&2 echo "Here are the top 100 valid labels for this git repository:"
        >&2 echo
        gh label list --json name --jq '.[].name' --limit 100
        exit 1
    fi

    # If a title isn't provided, use the last commit message
    if [[ -z $pr_title ]]; then
        pr_title=$(git log -1 --pretty=%B)
    fi

    export GIT_PR_CREATE_RAN=1

    cur_time=$(date +%s)
    old_pr_file_name=git-pr-create."$cur_time".old.md
    new_pr_file_name=git-pr-create."$cur_time".new.md

    echo -e "--- TITLE\n$pr_title\n--- END\n" > "$old_pr_file_name"
    echo -e "--- TITLE\n$pr_title\n--- END\n" > "$new_pr_file_name"
    echo -e "--- EXISTING LABELS" >> "$old_pr_file_name"
    echo -e "--- EXISTING LABELS" >> "$new_pr_file_name"
    for label in "${repo_labels[@]}"; do
        echo "$label" >> "$old_pr_file_name"
        echo "$label" >> "$new_pr_file_name"
    done
    echo -e "--- END\n" >> "$old_pr_file_name"
    echo -e "--- END\n" >> "$new_pr_file_name"

    echo -e "--- LABELS" >> "$old_pr_file_name"
    echo -e "--- LABELS" >> "$new_pr_file_name"
    for label in "${labels[@]}"; do
        echo "$label" >> "$old_pr_file_name"
        echo "$label" >> "$new_pr_file_name"
    done
    echo -e "--- END\n" >> "$old_pr_file_name"
    echo -e "--- END\n" >> "$new_pr_file_name"

    echo -e "--- BODY\n" >> "$old_pr_file_name"
    echo -e "--- BODY\n" >> "$new_pr_file_name"
    if [[ -f .github/PULL_REQUEST_TEMPLATE.md ]]; then
        cat .github/PULL_REQUEST_TEMPLATE.md >> "$old_pr_file_name"
        cat .github/PULL_REQUEST_TEMPLATE.md >> "$new_pr_file_name"
    fi
    echo -e "--- END\n" >> "$old_pr_file_name"
    echo -e "--- END\n" >> "$new_pr_file_name"

    if [[ $OSTYPE == "darwin"* ]]; then
        old_file_md5=$(md5 -q "$old_pr_file_name")
    else
        old_file_md5=$(md5sum "$old_pr_file_name" | cut -d' ' -f1)
    fi

    $EDITOR "$new_pr_file_name"
fi

if [[ $OSTYPE == "darwin"* ]]; then
    new_file_md5=$(md5 -q "$new_pr_file_name")
else
    new_file_md5=$(md5sum "$new_pr_file_name" | cut -d' ' -f1)
fi

if [[ "$old_file_md5" == "$new_file_md5" ]]; then
    >&2 echo -e "\nNo PR created!"
    rm -f "$old_pr_file_name"
    rm -f "$new_pr_file_name"
    exit 1
fi

# Use sed address ranges to extract each section
# From: https://www.baeldung.com/linux/print-lines-between-two-patterns
title=$($SED -n '/--- TITLE/, /--- END/{ /--- TITLE/! { /--- END/! p } }' < "$new_pr_file_name")

labels=()
while IFS=$'\n' read -r label; do labels+=("--label" "$label"); done < <($SED -n '/--- LABELS/, /--- END/{ /--- LABELS/! { /--- END/! p } }' < "$new_pr_file_name")

body=$($SED -n '/--- BODY/, /--- END/{ /--- BODY/! { /--- END/! p } }' < "$new_pr_file_name")

if ! output=$(gh pr create \
    --head "$(git branch --show-current)" \
    --assignee "@me" \
    --title "$title" \
    --body "$body" \
    "${labels[@]}" \
    "${args[@]}" 2>&1); then
    >&2 echo
    error "$output\n"
    warn "PR file written to $new_pr_file_name, re-run '$prog' to use"
    exit 1
fi

pr_info

rm -f "$old_pr_file_name"
rm -f "$new_pr_file_name"
