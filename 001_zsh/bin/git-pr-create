#!/bin/bash

set -e

args=()
pr_types=(python ruby go docker docs documentation)
pr_type=
pr_title=
pr_is_draft=0
labels=()

while [[ $# -gt 0 ]]; do
    case $1 in
    -l|--label)
        # shellcheck disable=SC2076
        if [[ " ${pr_types[*]} " =~ " ${2} " ]]; then
            pr_type=$2
        fi
        args+=("$1" "$2")
        labels+=("$2")
        shift; shift
        ;;
    -t|--title)
        pr_title="$2"
        shift; shift
        ;;
    -d|--draft)
        pr_is_draft=1
        args+=("$1")
        shift 
        ;;
    *)
        args+=("$1")
        shift
        ;;
    esac
done

# Get list of labels that are available in the current repository
repo_labels=()
while IFS=$'\n' read -r label; do repo_labels+=("$label"); done < <(gh label list --json name --jq '.[].name' --limit 100)

# Make sure that all of the provided labels are in `repo_labels`
invalid_labels=()
for label in "${labels[@]}"; do
    # shellcheck disable=SC2076
    if [[ ! " ${repo_labels[*]} " =~ " ${label} " ]]; then
        invalid_labels+=("$label")
    fi
done

# If we have an invalid labels we print an error and exit
if [[ ${#invalid_labels[@]} -ne 0 ]]; then
    >&2 printf "\nERROR: the following labels were not found in git repository\n"
    >&2 printf "invalid labels -> (%s)\n" "${invalid_labels[*]}"
    exit 1
fi

if [[ -z $pr_title ]]; then
    pr_title=$(git log -1 --pretty=%B)
    >&2 printf "\nNo PR title provided, defaulting to last commit message \"%s\"\n" "$pr_title"
else
    >&2 printf "\nUsing \"%s\" as PR title\n" "$pr_title"
fi

export GIT_PR_CREATE_RAN=1

cur_time=$(date +%s)
pr_file_name=git-pr-create."$cur_time".md

if [[ -f .github/PULL_REQUEST_TEMPLATE.md ]]; then
    cp .github/PULL_REQUEST_TEMPLATE.md "$pr_file_name"
else
    touch "$pr_file_name"
fi

nvim "$pr_file_name"

if [[ -f .github/PULL_REQUEST_TEMPLATE.md ]]; then
    pr_template_md5=$(md5 -q .github/PULL_REQUEST_TEMPLATE.md)
    file_md5=$(md5 -q "$pr_file_name")

    if [[ "$file_md5" == "$pr_template_md5" ]]; then
        rm -f "$pr_file_name"
        exit 1
    fi
elif [[ ! -s "$pr_file_name" ]]; then
    rm -f "$pr_file_name"
    exit 1
fi

gh pr create \
    --head "$(git branch --show-current)" \
    --assignee "@me" \
    --title "$pr_title" \
    --body-file "$pr_file_name" \
    "${args[@]}" || exit $?

if [[ -n "$pr_type" ]]; then
    url=$(gh pr view --json url --jq .url)

    if [[ $pr_is_draft -ne 0 ]]; then
        output=$(printf "%s\n:point_up: :%s: [Draft PR] %s\n" "$url" "$pr_type" "$pr_title")
    else
        output=$(printf "%s\n:point_up: :%s: %s\n" "$url" "$pr_type" "$pr_title")
    fi

    >&2 printf "\nThe below has been copied to your clipboard! ðŸ“‹\n\n"
    echo "$output"
    echo "$output" | pbcopy
fi

rm -f "$pr_file_name"
